// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MeralBurnt extends ethereum.Event {
  get params(): MeralBurnt__Params {
    return new MeralBurnt__Params(this);
  }
}

export class MeralBurnt__Params {
  _event: MeralBurnt;

  constructor(event: MeralBurnt) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PropsChange extends ethereum.Event {
  get params(): PropsChange__Params {
    return new PropsChange__Params(this);
  }
}

export class PropsChange__Params {
  _event: PropsChange;

  constructor(event: PropsChange) {
    this._event = event;
  }

  get burnableLimit(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get maxTokenId(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class EthemeralsBurner extends ethereum.SmartContract {
  static bind(address: Address): EthemeralsBurner {
    return new EthemeralsBurner("EthemeralsBurner", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burnAddress(): Address {
    let result = super.call("burnAddress", "burnAddress():(address)", []);

    return result[0].toAddress();
  }

  try_burnAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("burnAddress", "burnAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burnableLimit(): i32 {
    let result = super.call("burnableLimit", "burnableLimit():(uint16)", []);

    return result[0].toI32();
  }

  try_burnableLimit(): ethereum.CallResult<i32> {
    let result = super.tryCall("burnableLimit", "burnableLimit():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  count(): i32 {
    let result = super.call("count", "count():(uint16)", []);

    return result[0].toI32();
  }

  try_count(): ethereum.CallResult<i32> {
    let result = super.tryCall("count", "count():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  maxTokenId(): i32 {
    let result = super.call("maxTokenId", "maxTokenId():(uint16)", []);

    return result[0].toI32();
  }

  try_maxTokenId(): ethereum.CallResult<i32> {
    let result = super.tryCall("maxTokenId", "maxTokenId():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _coreAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetBurnAddressCall extends ethereum.Call {
  get inputs(): SetBurnAddressCall__Inputs {
    return new SetBurnAddressCall__Inputs(this);
  }

  get outputs(): SetBurnAddressCall__Outputs {
    return new SetBurnAddressCall__Outputs(this);
  }
}

export class SetBurnAddressCall__Inputs {
  _call: SetBurnAddressCall;

  constructor(call: SetBurnAddressCall) {
    this._call = call;
  }

  get _burnAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBurnAddressCall__Outputs {
  _call: SetBurnAddressCall;

  constructor(call: SetBurnAddressCall) {
    this._call = call;
  }
}

export class SetPropsCall extends ethereum.Call {
  get inputs(): SetPropsCall__Inputs {
    return new SetPropsCall__Inputs(this);
  }

  get outputs(): SetPropsCall__Outputs {
    return new SetPropsCall__Outputs(this);
  }
}

export class SetPropsCall__Inputs {
  _call: SetPropsCall;

  constructor(call: SetPropsCall) {
    this._call = call;
  }

  get _burnableLimit(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _maxTokenId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetPropsCall__Outputs {
  _call: SetPropsCall;

  constructor(call: SetPropsCall) {
    this._call = call;
  }
}

export class TransferCoreOwnershipCall extends ethereum.Call {
  get inputs(): TransferCoreOwnershipCall__Inputs {
    return new TransferCoreOwnershipCall__Inputs(this);
  }

  get outputs(): TransferCoreOwnershipCall__Outputs {
    return new TransferCoreOwnershipCall__Outputs(this);
  }
}

export class TransferCoreOwnershipCall__Inputs {
  _call: TransferCoreOwnershipCall;

  constructor(call: TransferCoreOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferCoreOwnershipCall__Outputs {
  _call: TransferCoreOwnershipCall;

  constructor(call: TransferCoreOwnershipCall) {
    this._call = call;
  }
}
