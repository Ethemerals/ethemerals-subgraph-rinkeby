// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Core extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("mintPrice", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Core entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Core entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Core", id.toString(), this);
    }
  }

  static load(id: string): Core | null {
    return changetype<Core | null>(store.get("Core", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get mintPrice(): BigInt {
    let value = this.get("mintPrice");
    return value!.toBigInt();
  }

  set mintPrice(value: BigInt) {
    this.set("mintPrice", Value.fromBigInt(value));
  }

  get maxAvailableIndex(): BigInt | null {
    let value = this.get("maxAvailableIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxAvailableIndex(value: BigInt | null) {
    if (!value) {
      this.unset("maxAvailableIndex");
    } else {
      this.set("maxAvailableIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get ethemeralSupply(): BigInt | null {
    let value = this.get("ethemeralSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethemeralSupply(value: BigInt | null) {
    if (!value) {
      this.unset("ethemeralSupply");
    } else {
      this.set("ethemeralSupply", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Delegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("active", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Delegate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Delegate", id.toString(), this);
    }
  }

  static load(id: string): Delegate | null {
    return changetype<Delegate | null>(store.get("Delegate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (!value) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Ethemeral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("creator", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("previousOwner", Value.fromString(""));
    this.set("score", Value.fromBigInt(BigInt.zero()));
    this.set("rewards", Value.fromBigInt(BigInt.zero()));
    this.set("atk", Value.fromBigInt(BigInt.zero()));
    this.set("def", Value.fromBigInt(BigInt.zero()));
    this.set("spd", Value.fromBigInt(BigInt.zero()));
    this.set("atkBonus", Value.fromBigInt(BigInt.zero()));
    this.set("defBonus", Value.fromBigInt(BigInt.zero()));
    this.set("spdBonus", Value.fromBigInt(BigInt.zero()));
    this.set("baseId", Value.fromBigInt(BigInt.zero()));
    this.set("bgId", Value.fromBigInt(BigInt.zero()));
    this.set("coin", Value.fromString(""));
    this.set("mainClass", Value.fromString(""));
    this.set("subClass", Value.fromString(""));
    this.set("hair", Value.fromString(""));
    this.set("eyes", Value.fromString(""));
    this.set("skin", Value.fromString(""));
    this.set("costume", Value.fromString(""));
    this.set("petRedeemed", Value.fromBoolean(false));
    this.set("scorecard", Value.fromString(""));
    this.set("wildsScoreCard", Value.fromString(""));
    this.set("metadata", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ethemeral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Ethemeral entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Ethemeral", id.toString(), this);
    }
  }

  static load(id: string): Ethemeral | null {
    return changetype<Ethemeral | null>(store.get("Ethemeral", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get previousOwner(): string {
    let value = this.get("previousOwner");
    return value!.toString();
  }

  set previousOwner(value: string) {
    this.set("previousOwner", Value.fromString(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value!.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get rewards(): BigInt {
    let value = this.get("rewards");
    return value!.toBigInt();
  }

  set rewards(value: BigInt) {
    this.set("rewards", Value.fromBigInt(value));
  }

  get atk(): BigInt {
    let value = this.get("atk");
    return value!.toBigInt();
  }

  set atk(value: BigInt) {
    this.set("atk", Value.fromBigInt(value));
  }

  get def(): BigInt {
    let value = this.get("def");
    return value!.toBigInt();
  }

  set def(value: BigInt) {
    this.set("def", Value.fromBigInt(value));
  }

  get spd(): BigInt {
    let value = this.get("spd");
    return value!.toBigInt();
  }

  set spd(value: BigInt) {
    this.set("spd", Value.fromBigInt(value));
  }

  get atkBonus(): BigInt {
    let value = this.get("atkBonus");
    return value!.toBigInt();
  }

  set atkBonus(value: BigInt) {
    this.set("atkBonus", Value.fromBigInt(value));
  }

  get defBonus(): BigInt {
    let value = this.get("defBonus");
    return value!.toBigInt();
  }

  set defBonus(value: BigInt) {
    this.set("defBonus", Value.fromBigInt(value));
  }

  get spdBonus(): BigInt {
    let value = this.get("spdBonus");
    return value!.toBigInt();
  }

  set spdBonus(value: BigInt) {
    this.set("spdBonus", Value.fromBigInt(value));
  }

  get baseId(): BigInt {
    let value = this.get("baseId");
    return value!.toBigInt();
  }

  set baseId(value: BigInt) {
    this.set("baseId", Value.fromBigInt(value));
  }

  get edition(): BigInt | null {
    let value = this.get("edition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set edition(value: BigInt | null) {
    if (!value) {
      this.unset("edition");
    } else {
      this.set("edition", Value.fromBigInt(<BigInt>value));
    }
  }

  get bgId(): BigInt {
    let value = this.get("bgId");
    return value!.toBigInt();
  }

  set bgId(value: BigInt) {
    this.set("bgId", Value.fromBigInt(value));
  }

  get coin(): string {
    let value = this.get("coin");
    return value!.toString();
  }

  set coin(value: string) {
    this.set("coin", Value.fromString(value));
  }

  get mainClass(): string {
    let value = this.get("mainClass");
    return value!.toString();
  }

  set mainClass(value: string) {
    this.set("mainClass", Value.fromString(value));
  }

  get subClass(): string {
    let value = this.get("subClass");
    return value!.toString();
  }

  set subClass(value: string) {
    this.set("subClass", Value.fromString(value));
  }

  get hair(): string {
    let value = this.get("hair");
    return value!.toString();
  }

  set hair(value: string) {
    this.set("hair", Value.fromString(value));
  }

  get eyes(): string {
    let value = this.get("eyes");
    return value!.toString();
  }

  set eyes(value: string) {
    this.set("eyes", Value.fromString(value));
  }

  get skin(): string {
    let value = this.get("skin");
    return value!.toString();
  }

  set skin(value: string) {
    this.set("skin", Value.fromString(value));
  }

  get costume(): string {
    let value = this.get("costume");
    return value!.toString();
  }

  set costume(value: string) {
    this.set("costume", Value.fromString(value));
  }

  get petRedeemed(): boolean {
    let value = this.get("petRedeemed");
    return value!.toBoolean();
  }

  set petRedeemed(value: boolean) {
    this.set("petRedeemed", Value.fromBoolean(value));
  }

  get scorecard(): string {
    let value = this.get("scorecard");
    return value!.toString();
  }

  set scorecard(value: string) {
    this.set("scorecard", Value.fromString(value));
  }

  get wildsScoreCard(): string {
    let value = this.get("wildsScoreCard");
    return value!.toString();
  }

  set wildsScoreCard(value: string) {
    this.set("wildsScoreCard", Value.fromString(value));
  }

  get LCP(): Array<string> | null {
    let value = this.get("LCP");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set LCP(value: Array<string> | null) {
    if (!value) {
      this.unset("LCP");
    } else {
      this.set("LCP", Value.fromStringArray(<Array<string>>value));
    }
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (!value) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Metadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("editionCount", Value.fromBigInt(BigInt.zero()));
    this.set("coin", Value.fromString(""));
    this.set("artist", Value.fromString(""));
    this.set("mainClass", Value.fromString(""));
    this.set("subClass", Value.fromString(""));
    this.set("special1", Value.fromI32(0));
    this.set("special2", Value.fromString(""));
    this.set("hair", Value.fromString(""));
    this.set("eyes", Value.fromString(""));
    this.set("skin", Value.fromString(""));
    this.set("costume", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Metadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Metadata entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Metadata", id.toString(), this);
    }
  }

  static load(id: string): Metadata | null {
    return changetype<Metadata | null>(store.get("Metadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethemerals(): Array<string> | null {
    let value = this.get("ethemerals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ethemerals(value: Array<string> | null) {
    if (!value) {
      this.unset("ethemerals");
    } else {
      this.set("ethemerals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get editionCount(): BigInt {
    let value = this.get("editionCount");
    return value!.toBigInt();
  }

  set editionCount(value: BigInt) {
    this.set("editionCount", Value.fromBigInt(value));
  }

  get coin(): string {
    let value = this.get("coin");
    return value!.toString();
  }

  set coin(value: string) {
    this.set("coin", Value.fromString(value));
  }

  get artist(): string {
    let value = this.get("artist");
    return value!.toString();
  }

  set artist(value: string) {
    this.set("artist", Value.fromString(value));
  }

  get mainClass(): string {
    let value = this.get("mainClass");
    return value!.toString();
  }

  set mainClass(value: string) {
    this.set("mainClass", Value.fromString(value));
  }

  get subClass(): string {
    let value = this.get("subClass");
    return value!.toString();
  }

  set subClass(value: string) {
    this.set("subClass", Value.fromString(value));
  }

  get special1(): i32 {
    let value = this.get("special1");
    return value!.toI32();
  }

  set special1(value: i32) {
    this.set("special1", Value.fromI32(value));
  }

  get special2(): string {
    let value = this.get("special2");
    return value!.toString();
  }

  set special2(value: string) {
    this.set("special2", Value.fromString(value));
  }

  get hair(): string {
    let value = this.get("hair");
    return value!.toString();
  }

  set hair(value: string) {
    this.set("hair", Value.fromString(value));
  }

  get eyes(): string {
    let value = this.get("eyes");
    return value!.toString();
  }

  set eyes(value: string) {
    this.set("eyes", Value.fromString(value));
  }

  get skin(): string {
    let value = this.get("skin");
    return value!.toString();
  }

  set skin(value: string) {
    this.set("skin", Value.fromString(value));
  }

  get costume(): string {
    let value = this.get("costume");
    return value!.toString();
  }

  set costume(value: string) {
    this.set("costume", Value.fromString(value));
  }
}

export class Scorecard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ethemeral", Value.fromString(""));
    this.set("highestScore", Value.fromBigInt(BigInt.zero()));
    this.set("highestRewards", Value.fromBigInt(BigInt.zero()));
    this.set("battles", Value.fromBigInt(BigInt.zero()));
    this.set("wins", Value.fromBigInt(BigInt.zero()));
    this.set("revived", Value.fromBigInt(BigInt.zero()));
    this.set("reviver", Value.fromBigInt(BigInt.zero()));
    this.set("resurrected", Value.fromBigInt(BigInt.zero()));
    this.set("reaped", Value.fromBigInt(BigInt.zero()));
    this.set("reaper", Value.fromBigInt(BigInt.zero()));
    this.set("drained", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Scorecard entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Scorecard entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Scorecard", id.toString(), this);
    }
  }

  static load(id: string): Scorecard | null {
    return changetype<Scorecard | null>(store.get("Scorecard", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethemeral(): string {
    let value = this.get("ethemeral");
    return value!.toString();
  }

  set ethemeral(value: string) {
    this.set("ethemeral", Value.fromString(value));
  }

  get highestScore(): BigInt {
    let value = this.get("highestScore");
    return value!.toBigInt();
  }

  set highestScore(value: BigInt) {
    this.set("highestScore", Value.fromBigInt(value));
  }

  get highestRewards(): BigInt {
    let value = this.get("highestRewards");
    return value!.toBigInt();
  }

  set highestRewards(value: BigInt) {
    this.set("highestRewards", Value.fromBigInt(value));
  }

  get battles(): BigInt {
    let value = this.get("battles");
    return value!.toBigInt();
  }

  set battles(value: BigInt) {
    this.set("battles", Value.fromBigInt(value));
  }

  get wins(): BigInt {
    let value = this.get("wins");
    return value!.toBigInt();
  }

  set wins(value: BigInt) {
    this.set("wins", Value.fromBigInt(value));
  }

  get revived(): BigInt {
    let value = this.get("revived");
    return value!.toBigInt();
  }

  set revived(value: BigInt) {
    this.set("revived", Value.fromBigInt(value));
  }

  get reviver(): BigInt {
    let value = this.get("reviver");
    return value!.toBigInt();
  }

  set reviver(value: BigInt) {
    this.set("reviver", Value.fromBigInt(value));
  }

  get resurrected(): BigInt {
    let value = this.get("resurrected");
    return value!.toBigInt();
  }

  set resurrected(value: BigInt) {
    this.set("resurrected", Value.fromBigInt(value));
  }

  get reaped(): BigInt {
    let value = this.get("reaped");
    return value!.toBigInt();
  }

  set reaped(value: BigInt) {
    this.set("reaped", Value.fromBigInt(value));
  }

  get reaper(): BigInt {
    let value = this.get("reaper");
    return value!.toBigInt();
  }

  set reaper(value: BigInt) {
    this.set("reaper", Value.fromBigInt(value));
  }

  get drained(): BigInt {
    let value = this.get("drained");
    return value!.toBigInt();
  }

  set drained(value: BigInt) {
    this.set("drained", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("elfBalance", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("allowDelegates", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get elfBalance(): BigInt {
    let value = this.get("elfBalance");
    return value!.toBigInt();
  }

  set elfBalance(value: BigInt) {
    this.set("elfBalance", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get allowDelegates(): boolean {
    let value = this.get("allowDelegates");
    return value!.toBoolean();
  }

  set allowDelegates(value: boolean) {
    this.set("allowDelegates", Value.fromBoolean(value));
  }

  get ethemerals(): Array<string> | null {
    let value = this.get("ethemerals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ethemerals(value: Array<string> | null) {
    if (!value) {
      this.unset("ethemerals");
    } else {
      this.set("ethemerals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get created(): Array<string> | null {
    let value = this.get("created");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set created(value: Array<string> | null) {
    if (!value) {
      this.unset("created");
    } else {
      this.set("created", Value.fromStringArray(<Array<string>>value));
    }
  }

  get pets(): Array<string> | null {
    let value = this.get("pets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pets(value: Array<string> | null) {
    if (!value) {
      this.unset("pets");
    } else {
      this.set("pets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdPets(): Array<string> | null {
    let value = this.get("createdPets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set createdPets(value: Array<string> | null) {
    if (!value) {
      this.unset("createdPets");
    } else {
      this.set("createdPets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (!value) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdItems(): Array<string> | null {
    let value = this.get("createdItems");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set createdItems(value: Array<string> | null) {
    if (!value) {
      this.unset("createdItems");
    } else {
      this.set("createdItems", Value.fromStringArray(<Array<string>>value));
    }
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (!value) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CoreAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CoreAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CoreAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CoreAction", id.toString(), this);
    }
  }

  static load(id: string): CoreAction | null {
    return changetype<CoreAction | null>(store.get("CoreAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class DelegateAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("delegate", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DelegateAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DelegateAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DelegateAction", id.toString(), this);
    }
  }

  static load(id: string): DelegateAction | null {
    return changetype<DelegateAction | null>(store.get("DelegateAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegate(): string {
    let value = this.get("delegate");
    return value!.toString();
  }

  set delegate(value: string) {
    this.set("delegate", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class EthemeralAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ethemeral", Value.fromString(""));
    this.set("win", Value.fromBoolean(false));
    this.set("staked", Value.fromBoolean(false));
    this.set("long", Value.fromBoolean(false));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EthemeralAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EthemeralAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EthemeralAction", id.toString(), this);
    }
  }

  static load(id: string): EthemeralAction | null {
    return changetype<EthemeralAction | null>(store.get("EthemeralAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethemeral(): string {
    let value = this.get("ethemeral");
    return value!.toString();
  }

  set ethemeral(value: string) {
    this.set("ethemeral", Value.fromString(value));
  }

  get score(): BigInt | null {
    let value = this.get("score");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set score(value: BigInt | null) {
    if (!value) {
      this.unset("score");
    } else {
      this.set("score", Value.fromBigInt(<BigInt>value));
    }
  }

  get win(): boolean {
    let value = this.get("win");
    return value!.toBoolean();
  }

  set win(value: boolean) {
    this.set("win", Value.fromBoolean(value));
  }

  get rewards(): BigInt | null {
    let value = this.get("rewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewards(value: BigInt | null) {
    if (!value) {
      this.unset("rewards");
    } else {
      this.set("rewards", Value.fromBigInt(<BigInt>value));
    }
  }

  get staked(): boolean {
    let value = this.get("staked");
    return value!.toBoolean();
  }

  set staked(value: boolean) {
    this.set("staked", Value.fromBoolean(value));
  }

  get priceFeed(): BigInt | null {
    let value = this.get("priceFeed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set priceFeed(value: BigInt | null) {
    if (!value) {
      this.unset("priceFeed");
    } else {
      this.set("priceFeed", Value.fromBigInt(<BigInt>value));
    }
  }

  get long(): boolean {
    let value = this.get("long");
    return value!.toBoolean();
  }

  set long(value: boolean) {
    this.set("long", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class AccountAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AccountAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AccountAction", id.toString(), this);
    }
  }

  static load(id: string): AccountAction | null {
    return changetype<AccountAction | null>(store.get("AccountAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get ethemeral(): string | null {
    let value = this.get("ethemeral");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ethemeral(value: string | null) {
    if (!value) {
      this.unset("ethemeral");
    } else {
      this.set("ethemeral", Value.fromString(<string>value));
    }
  }

  get pet(): string | null {
    let value = this.get("pet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pet(value: string | null) {
    if (!value) {
      this.unset("pet");
    } else {
      this.set("pet", Value.fromString(<string>value));
    }
  }

  get item(): string | null {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set item(value: string | null) {
    if (!value) {
      this.unset("item");
    } else {
      this.set("item", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Pet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("creator", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("previousOwner", Value.fromString(""));
    this.set("baseId", Value.fromBigInt(BigInt.zero()));
    this.set("atk", Value.fromBigInt(BigInt.zero()));
    this.set("def", Value.fromBigInt(BigInt.zero()));
    this.set("spd", Value.fromBigInt(BigInt.zero()));
    this.set("rarity", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
    this.set("metadata", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pet", id.toString(), this);
    }
  }

  static load(id: string): Pet | null {
    return changetype<Pet | null>(store.get("Pet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get previousOwner(): string {
    let value = this.get("previousOwner");
    return value!.toString();
  }

  set previousOwner(value: string) {
    this.set("previousOwner", Value.fromString(value));
  }

  get baseId(): BigInt {
    let value = this.get("baseId");
    return value!.toBigInt();
  }

  set baseId(value: BigInt) {
    this.set("baseId", Value.fromBigInt(value));
  }

  get edition(): BigInt | null {
    let value = this.get("edition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set edition(value: BigInt | null) {
    if (!value) {
      this.unset("edition");
    } else {
      this.set("edition", Value.fromBigInt(<BigInt>value));
    }
  }

  get atk(): BigInt {
    let value = this.get("atk");
    return value!.toBigInt();
  }

  set atk(value: BigInt) {
    this.set("atk", Value.fromBigInt(value));
  }

  get def(): BigInt {
    let value = this.get("def");
    return value!.toBigInt();
  }

  set def(value: BigInt) {
    this.set("def", Value.fromBigInt(value));
  }

  get spd(): BigInt {
    let value = this.get("spd");
    return value!.toBigInt();
  }

  set spd(value: BigInt) {
    this.set("spd", Value.fromBigInt(value));
  }

  get rarity(): BigInt {
    let value = this.get("rarity");
    return value!.toBigInt();
  }

  set rarity(value: BigInt) {
    this.set("rarity", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }
}

export class PetMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("editionCount", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PetMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PetMetadata entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PetMetadata", id.toString(), this);
    }
  }

  static load(id: string): PetMetadata | null {
    return changetype<PetMetadata | null>(store.get("PetMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pets(): Array<string> | null {
    let value = this.get("pets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pets(value: Array<string> | null) {
    if (!value) {
      this.unset("pets");
    } else {
      this.set("pets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get editionCount(): BigInt {
    let value = this.get("editionCount");
    return value!.toBigInt();
  }

  set editionCount(value: BigInt) {
    this.set("editionCount", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}

export class PetAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pet", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PetAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PetAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PetAction", id.toString(), this);
    }
  }

  static load(id: string): PetAction | null {
    return changetype<PetAction | null>(store.get("PetAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pet(): string {
    let value = this.get("pet");
    return value!.toString();
  }

  set pet(value: string) {
    this.set("pet", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Item extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("creator", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("previousOwner", Value.fromString(""));
    this.set("baseId", Value.fromBigInt(BigInt.zero()));
    this.set("atk", Value.fromBigInt(BigInt.zero()));
    this.set("def", Value.fromBigInt(BigInt.zero()));
    this.set("spd", Value.fromBigInt(BigInt.zero()));
    this.set("rarity", Value.fromBigInt(BigInt.zero()));
    this.set("metadata", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Item entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Item entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Item", id.toString(), this);
    }
  }

  static load(id: string): Item | null {
    return changetype<Item | null>(store.get("Item", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get previousOwner(): string {
    let value = this.get("previousOwner");
    return value!.toString();
  }

  set previousOwner(value: string) {
    this.set("previousOwner", Value.fromString(value));
  }

  get baseId(): BigInt {
    let value = this.get("baseId");
    return value!.toBigInt();
  }

  set baseId(value: BigInt) {
    this.set("baseId", Value.fromBigInt(value));
  }

  get edition(): BigInt | null {
    let value = this.get("edition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set edition(value: BigInt | null) {
    if (!value) {
      this.unset("edition");
    } else {
      this.set("edition", Value.fromBigInt(<BigInt>value));
    }
  }

  get atk(): BigInt {
    let value = this.get("atk");
    return value!.toBigInt();
  }

  set atk(value: BigInt) {
    this.set("atk", Value.fromBigInt(value));
  }

  get def(): BigInt {
    let value = this.get("def");
    return value!.toBigInt();
  }

  set def(value: BigInt) {
    this.set("def", Value.fromBigInt(value));
  }

  get spd(): BigInt {
    let value = this.get("spd");
    return value!.toBigInt();
  }

  set spd(value: BigInt) {
    this.set("spd", Value.fromBigInt(value));
  }

  get rarity(): BigInt {
    let value = this.get("rarity");
    return value!.toBigInt();
  }

  set rarity(value: BigInt) {
    this.set("rarity", Value.fromBigInt(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }
}

export class ItemMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("editionCount", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ItemMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ItemMetadata entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ItemMetadata", id.toString(), this);
    }
  }

  static load(id: string): ItemMetadata | null {
    return changetype<ItemMetadata | null>(store.get("ItemMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (!value) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(<Array<string>>value));
    }
  }

  get editionCount(): BigInt {
    let value = this.get("editionCount");
    return value!.toBigInt();
  }

  set editionCount(value: BigInt) {
    this.set("editionCount", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}

export class ItemAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("item", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ItemAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ItemAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ItemAction", id.toString(), this);
    }
  }

  static load(id: string): ItemAction | null {
    return changetype<ItemAction | null>(store.get("ItemAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get item(): string {
    let value = this.get("item");
    return value!.toString();
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Art extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("creator", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("baseId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Art entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Art entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Art", id.toString(), this);
    }
  }

  static load(id: string): Art | null {
    return changetype<Art | null>(store.get("Art", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get baseId(): BigInt {
    let value = this.get("baseId");
    return value!.toBigInt();
  }

  set baseId(value: BigInt) {
    this.set("baseId", Value.fromBigInt(value));
  }

  get winner(): string | null {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set winner(value: string | null) {
    if (!value) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromString(<string>value));
    }
  }

  get edition(): BigInt | null {
    let value = this.get("edition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set edition(value: BigInt | null) {
    if (!value) {
      this.unset("edition");
    } else {
      this.set("edition", Value.fromBigInt(<BigInt>value));
    }
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get desc(): string | null {
    let value = this.get("desc");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set desc(value: string | null) {
    if (!value) {
      this.unset("desc");
    } else {
      this.set("desc", Value.fromString(<string>value));
    }
  }

  get artist(): string | null {
    let value = this.get("artist");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set artist(value: string | null) {
    if (!value) {
      this.unset("artist");
    } else {
      this.set("artist", Value.fromString(<string>value));
    }
  }
}

export class WildLand extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("raidStatus", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WildLand entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WildLand entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WildLand", id.toString(), this);
    }
  }

  static load(id: string): WildLand | null {
    return changetype<WildLand | null>(store.get("WildLand", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get raidStatus(): BigInt {
    let value = this.get("raidStatus");
    return value!.toBigInt();
  }

  set raidStatus(value: BigInt) {
    this.set("raidStatus", Value.fromBigInt(value));
  }

  get remainingELFx(): BigInt | null {
    let value = this.get("remainingELFx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set remainingELFx(value: BigInt | null) {
    if (!value) {
      this.unset("remainingELFx");
    } else {
      this.set("remainingELFx", Value.fromBigInt(<BigInt>value));
    }
  }

  get emissionRate(): BigInt | null {
    let value = this.get("emissionRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set emissionRate(value: BigInt | null) {
    if (!value) {
      this.unset("emissionRate");
    } else {
      this.set("emissionRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastEvent(): BigInt | null {
    let value = this.get("lastEvent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastEvent(value: BigInt | null) {
    if (!value) {
      this.unset("lastEvent");
    } else {
      this.set("lastEvent", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastRaid(): BigInt | null {
    let value = this.get("lastRaid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastRaid(value: BigInt | null) {
    if (!value) {
      this.unset("lastRaid");
    } else {
      this.set("lastRaid", Value.fromBigInt(<BigInt>value));
    }
  }

  get baseDefence(): BigInt | null {
    let value = this.get("baseDefence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set baseDefence(value: BigInt | null) {
    if (!value) {
      this.unset("baseDefence");
    } else {
      this.set("baseDefence", Value.fromBigInt(<BigInt>value));
    }
  }

  get wildStakes(): Array<string> | null {
    let value = this.get("wildStakes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set wildStakes(value: Array<string> | null) {
    if (!value) {
      this.unset("wildStakes");
    } else {
      this.set("wildStakes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get lcp(): Array<string> | null {
    let value = this.get("lcp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set lcp(value: Array<string> | null) {
    if (!value) {
      this.unset("lcp");
    } else {
      this.set("lcp", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class WildStake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("active", Value.fromBoolean(false));
    this.set("ethemeral", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WildStake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WildStake entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WildStake", id.toString(), this);
    }
  }

  static load(id: string): WildStake | null {
    return changetype<WildStake | null>(store.get("WildStake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get ethemeral(): string {
    let value = this.get("ethemeral");
    return value!.toString();
  }

  set ethemeral(value: string) {
    this.set("ethemeral", Value.fromString(value));
  }

  get land(): string | null {
    let value = this.get("land");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set land(value: string | null) {
    if (!value) {
      this.unset("land");
    } else {
      this.set("land", Value.fromString(<string>value));
    }
  }

  get stakeType(): BigInt | null {
    let value = this.get("stakeType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakeType(value: BigInt | null) {
    if (!value) {
      this.unset("stakeType");
    } else {
      this.set("stakeType", Value.fromBigInt(<BigInt>value));
    }
  }

  get startedAt(): BigInt | null {
    let value = this.get("startedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startedAt(value: BigInt | null) {
    if (!value) {
      this.unset("startedAt");
    } else {
      this.set("startedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastActionAt(): BigInt | null {
    let value = this.get("lastActionAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastActionAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastActionAt");
    } else {
      this.set("lastActionAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get damage(): BigInt | null {
    let value = this.get("damage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set damage(value: BigInt | null) {
    if (!value) {
      this.unset("damage");
    } else {
      this.set("damage", Value.fromBigInt(<BigInt>value));
    }
  }

  get health(): BigInt | null {
    let value = this.get("health");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set health(value: BigInt | null) {
    if (!value) {
      this.unset("health");
    } else {
      this.set("health", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class WildLCP extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("land", Value.fromString(""));
    this.set("ethemeral", Value.fromString(""));
    this.set("points", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WildLCP entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WildLCP entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WildLCP", id.toString(), this);
    }
  }

  static load(id: string): WildLCP | null {
    return changetype<WildLCP | null>(store.get("WildLCP", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get land(): string {
    let value = this.get("land");
    return value!.toString();
  }

  set land(value: string) {
    this.set("land", Value.fromString(value));
  }

  get ethemeral(): string {
    let value = this.get("ethemeral");
    return value!.toString();
  }

  set ethemeral(value: string) {
    this.set("ethemeral", Value.fromString(value));
  }

  get points(): BigInt {
    let value = this.get("points");
    return value!.toBigInt();
  }

  set points(value: BigInt) {
    this.set("points", Value.fromBigInt(value));
  }
}

export class WildsScoreCard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ethemeral", Value.fromString(""));
    this.set("defend", Value.fromBigInt(BigInt.zero()));
    this.set("loot", Value.fromBigInt(BigInt.zero()));
    this.set("birth", Value.fromBigInt(BigInt.zero()));
    this.set("attack", Value.fromBigInt(BigInt.zero()));
    this.set("revived", Value.fromBigInt(BigInt.zero()));
    this.set("reviver", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WildsScoreCard entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WildsScoreCard entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WildsScoreCard", id.toString(), this);
    }
  }

  static load(id: string): WildsScoreCard | null {
    return changetype<WildsScoreCard | null>(store.get("WildsScoreCard", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethemeral(): string {
    let value = this.get("ethemeral");
    return value!.toString();
  }

  set ethemeral(value: string) {
    this.set("ethemeral", Value.fromString(value));
  }

  get defend(): BigInt {
    let value = this.get("defend");
    return value!.toBigInt();
  }

  set defend(value: BigInt) {
    this.set("defend", Value.fromBigInt(value));
  }

  get loot(): BigInt {
    let value = this.get("loot");
    return value!.toBigInt();
  }

  set loot(value: BigInt) {
    this.set("loot", Value.fromBigInt(value));
  }

  get birth(): BigInt {
    let value = this.get("birth");
    return value!.toBigInt();
  }

  set birth(value: BigInt) {
    this.set("birth", Value.fromBigInt(value));
  }

  get attack(): BigInt {
    let value = this.get("attack");
    return value!.toBigInt();
  }

  set attack(value: BigInt) {
    this.set("attack", Value.fromBigInt(value));
  }

  get revived(): BigInt {
    let value = this.get("revived");
    return value!.toBigInt();
  }

  set revived(value: BigInt) {
    this.set("revived", Value.fromBigInt(value));
  }

  get reviver(): BigInt {
    let value = this.get("reviver");
    return value!.toBigInt();
  }

  set reviver(value: BigInt) {
    this.set("reviver", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}
