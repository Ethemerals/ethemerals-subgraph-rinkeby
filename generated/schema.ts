// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Core extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("mintPrice", Value.fromBigInt(BigInt.zero()));
    this.set("burnCount", Value.fromBigInt(BigInt.zero()));
    this.set("burnLimit", Value.fromBigInt(BigInt.zero()));
    this.set("burnMaxId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Core entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Core entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Core", id.toString(), this);
    }
  }

  static load(id: string): Core | null {
    return changetype<Core | null>(store.get("Core", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mintPrice(): BigInt {
    let value = this.get("mintPrice");
    return value!.toBigInt();
  }

  set mintPrice(value: BigInt) {
    this.set("mintPrice", Value.fromBigInt(value));
  }

  get maxAvailableIndex(): BigInt | null {
    let value = this.get("maxAvailableIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxAvailableIndex(value: BigInt | null) {
    if (!value) {
      this.unset("maxAvailableIndex");
    } else {
      this.set("maxAvailableIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get ethemeralSupply(): BigInt | null {
    let value = this.get("ethemeralSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethemeralSupply(value: BigInt | null) {
    if (!value) {
      this.unset("ethemeralSupply");
    } else {
      this.set("ethemeralSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get burnCount(): BigInt {
    let value = this.get("burnCount");
    return value!.toBigInt();
  }

  set burnCount(value: BigInt) {
    this.set("burnCount", Value.fromBigInt(value));
  }

  get burnLimit(): BigInt {
    let value = this.get("burnLimit");
    return value!.toBigInt();
  }

  set burnLimit(value: BigInt) {
    this.set("burnLimit", Value.fromBigInt(value));
  }

  get burnMaxId(): BigInt {
    let value = this.get("burnMaxId");
    return value!.toBigInt();
  }

  set burnMaxId(value: BigInt) {
    this.set("burnMaxId", Value.fromBigInt(value));
  }
}

export class Delegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("active", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Delegate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Delegate", id.toString(), this);
    }
  }

  static load(id: string): Delegate | null {
    return changetype<Delegate | null>(store.get("Delegate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class Operator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("approved", Value.fromBoolean(false));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Operator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Operator entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Operator", id.toString(), this);
    }
  }

  static load(id: string): Operator | null {
    return changetype<Operator | null>(store.get("Operator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class Meral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("meralId", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("creator", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("previousOwner", Value.fromString(""));
    this.set("petRedeemed", Value.fromBoolean(false));
    this.set("edition", Value.fromBigInt(BigInt.zero()));
    this.set("hp", Value.fromBigInt(BigInt.zero()));
    this.set("elf", Value.fromBigInt(BigInt.zero()));
    this.set("xp", Value.fromBigInt(BigInt.zero()));
    this.set("atk", Value.fromBigInt(BigInt.zero()));
    this.set("def", Value.fromBigInt(BigInt.zero()));
    this.set("spd", Value.fromBigInt(BigInt.zero()));
    this.set("atkBonus", Value.fromBigInt(BigInt.zero()));
    this.set("defBonus", Value.fromBigInt(BigInt.zero()));
    this.set("spdBonus", Value.fromBigInt(BigInt.zero()));
    this.set("cmId", Value.fromBigInt(BigInt.zero()));
    this.set("coin", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("artist", Value.fromString(""));
    this.set("element", Value.fromBigInt(BigInt.zero()));
    this.set("mainclass", Value.fromBigInt(BigInt.zero()));
    this.set("subclass", Value.fromBigInt(BigInt.zero()));
    this.set("hair", Value.fromString(""));
    this.set("eyes", Value.fromString(""));
    this.set("skin", Value.fromString(""));
    this.set("costume", Value.fromString(""));
    this.set("scorecard", Value.fromString(""));
    this.set("metadata", Value.fromString(""));
    this.set("burnt", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Meral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Meral entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Meral", id.toString(), this);
    }
  }

  static load(id: string): Meral | null {
    return changetype<Meral | null>(store.get("Meral", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get meralId(): BigInt {
    let value = this.get("meralId");
    return value!.toBigInt();
  }

  set meralId(value: BigInt) {
    this.set("meralId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get previousOwner(): string {
    let value = this.get("previousOwner");
    return value!.toString();
  }

  set previousOwner(value: string) {
    this.set("previousOwner", Value.fromString(value));
  }

  get petRedeemed(): boolean {
    let value = this.get("petRedeemed");
    return value!.toBoolean();
  }

  set petRedeemed(value: boolean) {
    this.set("petRedeemed", Value.fromBoolean(value));
  }

  get edition(): BigInt {
    let value = this.get("edition");
    return value!.toBigInt();
  }

  set edition(value: BigInt) {
    this.set("edition", Value.fromBigInt(value));
  }

  get hp(): BigInt {
    let value = this.get("hp");
    return value!.toBigInt();
  }

  set hp(value: BigInt) {
    this.set("hp", Value.fromBigInt(value));
  }

  get elf(): BigInt {
    let value = this.get("elf");
    return value!.toBigInt();
  }

  set elf(value: BigInt) {
    this.set("elf", Value.fromBigInt(value));
  }

  get xp(): BigInt {
    let value = this.get("xp");
    return value!.toBigInt();
  }

  set xp(value: BigInt) {
    this.set("xp", Value.fromBigInt(value));
  }

  get atk(): BigInt {
    let value = this.get("atk");
    return value!.toBigInt();
  }

  set atk(value: BigInt) {
    this.set("atk", Value.fromBigInt(value));
  }

  get def(): BigInt {
    let value = this.get("def");
    return value!.toBigInt();
  }

  set def(value: BigInt) {
    this.set("def", Value.fromBigInt(value));
  }

  get spd(): BigInt {
    let value = this.get("spd");
    return value!.toBigInt();
  }

  set spd(value: BigInt) {
    this.set("spd", Value.fromBigInt(value));
  }

  get atkBonus(): BigInt {
    let value = this.get("atkBonus");
    return value!.toBigInt();
  }

  set atkBonus(value: BigInt) {
    this.set("atkBonus", Value.fromBigInt(value));
  }

  get defBonus(): BigInt {
    let value = this.get("defBonus");
    return value!.toBigInt();
  }

  set defBonus(value: BigInt) {
    this.set("defBonus", Value.fromBigInt(value));
  }

  get spdBonus(): BigInt {
    let value = this.get("spdBonus");
    return value!.toBigInt();
  }

  set spdBonus(value: BigInt) {
    this.set("spdBonus", Value.fromBigInt(value));
  }

  get cmId(): BigInt {
    let value = this.get("cmId");
    return value!.toBigInt();
  }

  set cmId(value: BigInt) {
    this.set("cmId", Value.fromBigInt(value));
  }

  get coin(): string {
    let value = this.get("coin");
    return value!.toString();
  }

  set coin(value: string) {
    this.set("coin", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get artist(): string {
    let value = this.get("artist");
    return value!.toString();
  }

  set artist(value: string) {
    this.set("artist", Value.fromString(value));
  }

  get element(): BigInt {
    let value = this.get("element");
    return value!.toBigInt();
  }

  set element(value: BigInt) {
    this.set("element", Value.fromBigInt(value));
  }

  get mainclass(): BigInt {
    let value = this.get("mainclass");
    return value!.toBigInt();
  }

  set mainclass(value: BigInt) {
    this.set("mainclass", Value.fromBigInt(value));
  }

  get subclass(): BigInt {
    let value = this.get("subclass");
    return value!.toBigInt();
  }

  set subclass(value: BigInt) {
    this.set("subclass", Value.fromBigInt(value));
  }

  get hair(): string {
    let value = this.get("hair");
    return value!.toString();
  }

  set hair(value: string) {
    this.set("hair", Value.fromString(value));
  }

  get eyes(): string {
    let value = this.get("eyes");
    return value!.toString();
  }

  set eyes(value: string) {
    this.set("eyes", Value.fromString(value));
  }

  get skin(): string {
    let value = this.get("skin");
    return value!.toString();
  }

  set skin(value: string) {
    this.set("skin", Value.fromString(value));
  }

  get costume(): string {
    let value = this.get("costume");
    return value!.toString();
  }

  set costume(value: string) {
    this.set("costume", Value.fromString(value));
  }

  get scorecard(): string {
    let value = this.get("scorecard");
    return value!.toString();
  }

  set scorecard(value: string) {
    this.set("scorecard", Value.fromString(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (!value) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get burnt(): boolean {
    let value = this.get("burnt");
    return value!.toBoolean();
  }

  set burnt(value: boolean) {
    this.set("burnt", Value.fromBoolean(value));
  }
}

export class Metadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("editionCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Metadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Metadata entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Metadata", id.toString(), this);
    }
  }

  static load(id: string): Metadata | null {
    return changetype<Metadata | null>(store.get("Metadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get merals(): Array<string> | null {
    let value = this.get("merals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set merals(value: Array<string> | null) {
    if (!value) {
      this.unset("merals");
    } else {
      this.set("merals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get editionCount(): BigInt {
    let value = this.get("editionCount");
    return value!.toBigInt();
  }

  set editionCount(value: BigInt) {
    this.set("editionCount", Value.fromBigInt(value));
  }
}

export class Scorecard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("meral", Value.fromString(""));
    this.set("highestScore", Value.fromBigInt(BigInt.zero()));
    this.set("highestRewards", Value.fromBigInt(BigInt.zero()));
    this.set("battles", Value.fromBigInt(BigInt.zero()));
    this.set("wins", Value.fromBigInt(BigInt.zero()));
    this.set("revived", Value.fromBigInt(BigInt.zero()));
    this.set("reviver", Value.fromBigInt(BigInt.zero()));
    this.set("resurrected", Value.fromBigInt(BigInt.zero()));
    this.set("reaped", Value.fromBigInt(BigInt.zero()));
    this.set("reaper", Value.fromBigInt(BigInt.zero()));
    this.set("drained", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Scorecard entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Scorecard entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Scorecard", id.toString(), this);
    }
  }

  static load(id: string): Scorecard | null {
    return changetype<Scorecard | null>(store.get("Scorecard", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get meral(): string {
    let value = this.get("meral");
    return value!.toString();
  }

  set meral(value: string) {
    this.set("meral", Value.fromString(value));
  }

  get highestScore(): BigInt {
    let value = this.get("highestScore");
    return value!.toBigInt();
  }

  set highestScore(value: BigInt) {
    this.set("highestScore", Value.fromBigInt(value));
  }

  get highestRewards(): BigInt {
    let value = this.get("highestRewards");
    return value!.toBigInt();
  }

  set highestRewards(value: BigInt) {
    this.set("highestRewards", Value.fromBigInt(value));
  }

  get battles(): BigInt {
    let value = this.get("battles");
    return value!.toBigInt();
  }

  set battles(value: BigInt) {
    this.set("battles", Value.fromBigInt(value));
  }

  get wins(): BigInt {
    let value = this.get("wins");
    return value!.toBigInt();
  }

  set wins(value: BigInt) {
    this.set("wins", Value.fromBigInt(value));
  }

  get revived(): BigInt {
    let value = this.get("revived");
    return value!.toBigInt();
  }

  set revived(value: BigInt) {
    this.set("revived", Value.fromBigInt(value));
  }

  get reviver(): BigInt {
    let value = this.get("reviver");
    return value!.toBigInt();
  }

  set reviver(value: BigInt) {
    this.set("reviver", Value.fromBigInt(value));
  }

  get resurrected(): BigInt {
    let value = this.get("resurrected");
    return value!.toBigInt();
  }

  set resurrected(value: BigInt) {
    this.set("resurrected", Value.fromBigInt(value));
  }

  get reaped(): BigInt {
    let value = this.get("reaped");
    return value!.toBigInt();
  }

  set reaped(value: BigInt) {
    this.set("reaped", Value.fromBigInt(value));
  }

  get reaper(): BigInt {
    let value = this.get("reaper");
    return value!.toBigInt();
  }

  set reaper(value: BigInt) {
    this.set("reaper", Value.fromBigInt(value));
  }

  get drained(): BigInt {
    let value = this.get("drained");
    return value!.toBigInt();
  }

  set drained(value: BigInt) {
    this.set("drained", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("elfBalance", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("allowDelegates", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get elfBalance(): BigInt {
    let value = this.get("elfBalance");
    return value!.toBigInt();
  }

  set elfBalance(value: BigInt) {
    this.set("elfBalance", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get allowDelegates(): boolean {
    let value = this.get("allowDelegates");
    return value!.toBoolean();
  }

  set allowDelegates(value: boolean) {
    this.set("allowDelegates", Value.fromBoolean(value));
  }

  get operators(): Array<string> | null {
    let value = this.get("operators");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set operators(value: Array<string> | null) {
    if (!value) {
      this.unset("operators");
    } else {
      this.set("operators", Value.fromStringArray(<Array<string>>value));
    }
  }

  get merals(): Array<string> | null {
    let value = this.get("merals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set merals(value: Array<string> | null) {
    if (!value) {
      this.unset("merals");
    } else {
      this.set("merals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get created(): Array<string> | null {
    let value = this.get("created");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set created(value: Array<string> | null) {
    if (!value) {
      this.unset("created");
    } else {
      this.set("created", Value.fromStringArray(<Array<string>>value));
    }
  }

  get pets(): Array<string> | null {
    let value = this.get("pets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pets(value: Array<string> | null) {
    if (!value) {
      this.unset("pets");
    } else {
      this.set("pets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdPets(): Array<string> | null {
    let value = this.get("createdPets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set createdPets(value: Array<string> | null) {
    if (!value) {
      this.unset("createdPets");
    } else {
      this.set("createdPets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get actions(): Array<string> | null {
    let value = this.get("actions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set actions(value: Array<string> | null) {
    if (!value) {
      this.unset("actions");
    } else {
      this.set("actions", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class MeralAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("meral", Value.fromString(""));
    this.set("win", Value.fromBoolean(false));
    this.set("staked", Value.fromBoolean(false));
    this.set("long", Value.fromBoolean(false));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MeralAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MeralAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MeralAction", id.toString(), this);
    }
  }

  static load(id: string): MeralAction | null {
    return changetype<MeralAction | null>(store.get("MeralAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get meral(): string {
    let value = this.get("meral");
    return value!.toString();
  }

  set meral(value: string) {
    this.set("meral", Value.fromString(value));
  }

  get score(): BigInt | null {
    let value = this.get("score");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set score(value: BigInt | null) {
    if (!value) {
      this.unset("score");
    } else {
      this.set("score", Value.fromBigInt(<BigInt>value));
    }
  }

  get win(): boolean {
    let value = this.get("win");
    return value!.toBoolean();
  }

  set win(value: boolean) {
    this.set("win", Value.fromBoolean(value));
  }

  get rewards(): BigInt | null {
    let value = this.get("rewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewards(value: BigInt | null) {
    if (!value) {
      this.unset("rewards");
    } else {
      this.set("rewards", Value.fromBigInt(<BigInt>value));
    }
  }

  get staked(): boolean {
    let value = this.get("staked");
    return value!.toBoolean();
  }

  set staked(value: boolean) {
    this.set("staked", Value.fromBoolean(value));
  }

  get priceFeed(): BigInt | null {
    let value = this.get("priceFeed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set priceFeed(value: BigInt | null) {
    if (!value) {
      this.unset("priceFeed");
    } else {
      this.set("priceFeed", Value.fromBigInt(<BigInt>value));
    }
  }

  get long(): boolean {
    let value = this.get("long");
    return value!.toBoolean();
  }

  set long(value: boolean) {
    this.set("long", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class AccountAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AccountAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AccountAction", id.toString(), this);
    }
  }

  static load(id: string): AccountAction | null {
    return changetype<AccountAction | null>(store.get("AccountAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get meral(): string | null {
    let value = this.get("meral");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set meral(value: string | null) {
    if (!value) {
      this.unset("meral");
    } else {
      this.set("meral", Value.fromString(<string>value));
    }
  }

  get pet(): string | null {
    let value = this.get("pet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pet(value: string | null) {
    if (!value) {
      this.unset("pet");
    } else {
      this.set("pet", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Pet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("creator", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("previousOwner", Value.fromString(""));
    this.set("baseId", Value.fromBigInt(BigInt.zero()));
    this.set("atk", Value.fromBigInt(BigInt.zero()));
    this.set("def", Value.fromBigInt(BigInt.zero()));
    this.set("spd", Value.fromBigInt(BigInt.zero()));
    this.set("rarity", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
    this.set("metadata", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pet", id.toString(), this);
    }
  }

  static load(id: string): Pet | null {
    return changetype<Pet | null>(store.get("Pet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get previousOwner(): string {
    let value = this.get("previousOwner");
    return value!.toString();
  }

  set previousOwner(value: string) {
    this.set("previousOwner", Value.fromString(value));
  }

  get baseId(): BigInt {
    let value = this.get("baseId");
    return value!.toBigInt();
  }

  set baseId(value: BigInt) {
    this.set("baseId", Value.fromBigInt(value));
  }

  get edition(): BigInt | null {
    let value = this.get("edition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set edition(value: BigInt | null) {
    if (!value) {
      this.unset("edition");
    } else {
      this.set("edition", Value.fromBigInt(<BigInt>value));
    }
  }

  get atk(): BigInt {
    let value = this.get("atk");
    return value!.toBigInt();
  }

  set atk(value: BigInt) {
    this.set("atk", Value.fromBigInt(value));
  }

  get def(): BigInt {
    let value = this.get("def");
    return value!.toBigInt();
  }

  set def(value: BigInt) {
    this.set("def", Value.fromBigInt(value));
  }

  get spd(): BigInt {
    let value = this.get("spd");
    return value!.toBigInt();
  }

  set spd(value: BigInt) {
    this.set("spd", Value.fromBigInt(value));
  }

  get rarity(): BigInt {
    let value = this.get("rarity");
    return value!.toBigInt();
  }

  set rarity(value: BigInt) {
    this.set("rarity", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }
}

export class PetMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("editionCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PetMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PetMetadata entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PetMetadata", id.toString(), this);
    }
  }

  static load(id: string): PetMetadata | null {
    return changetype<PetMetadata | null>(store.get("PetMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pets(): Array<string> | null {
    let value = this.get("pets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pets(value: Array<string> | null) {
    if (!value) {
      this.unset("pets");
    } else {
      this.set("pets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get editionCount(): BigInt {
    let value = this.get("editionCount");
    return value!.toBigInt();
  }

  set editionCount(value: BigInt) {
    this.set("editionCount", Value.fromBigInt(value));
  }
}

export class PetAction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("pet", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transaction", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PetAction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PetAction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PetAction", id.toString(), this);
    }
  }

  static load(id: string): PetAction | null {
    return changetype<PetAction | null>(store.get("PetAction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pet(): string {
    let value = this.get("pet");
    return value!.toString();
  }

  set pet(value: string) {
    this.set("pet", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("value", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}
