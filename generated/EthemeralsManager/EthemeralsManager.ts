// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MeralBurnt extends ethereum.Event {
  get params(): MeralBurnt__Params {
    return new MeralBurnt__Params(this);
  }
}

export class MeralBurnt__Params {
  _event: MeralBurnt;

  constructor(event: MeralBurnt) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EthemeralsManager extends ethereum.SmartContract {
  static bind(address: Address): EthemeralsManager {
    return new EthemeralsManager("EthemeralsManager", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burnAddress(): Address {
    let result = super.call("burnAddress", "burnAddress():(address)", []);

    return result[0].toAddress();
  }

  try_burnAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("burnAddress", "burnAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burnableLimit(): i32 {
    let result = super.call("burnableLimit", "burnableLimit():(uint16)", []);

    return result[0].toI32();
  }

  try_burnableLimit(): ethereum.CallResult<i32> {
    let result = super.tryCall("burnableLimit", "burnableLimit():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  count(): i32 {
    let result = super.call("count", "count():(uint16)", []);

    return result[0].toI32();
  }

  try_count(): ethereum.CallResult<i32> {
    let result = super.tryCall("count", "count():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  maxTokenId(): i32 {
    let result = super.call("maxTokenId", "maxTokenId():(uint16)", []);

    return result[0].toI32();
  }

  try_maxTokenId(): ethereum.CallResult<i32> {
    let result = super.tryCall("maxTokenId", "maxTokenId():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _coreAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnAndMintCall extends ethereum.Call {
  get inputs(): BurnAndMintCall__Inputs {
    return new BurnAndMintCall__Inputs(this);
  }

  get outputs(): BurnAndMintCall__Outputs {
    return new BurnAndMintCall__Outputs(this);
  }
}

export class BurnAndMintCall__Inputs {
  _call: BurnAndMintCall;

  constructor(call: BurnAndMintCall) {
    this._call = call;
  }

  get merals(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BurnAndMintCall__Outputs {
  _call: BurnAndMintCall;

  constructor(call: BurnAndMintCall) {
    this._call = call;
  }
}

export class MintAdminCall extends ethereum.Call {
  get inputs(): MintAdminCall__Inputs {
    return new MintAdminCall__Inputs(this);
  }

  get outputs(): MintAdminCall__Outputs {
    return new MintAdminCall__Outputs(this);
  }
}

export class MintAdminCall__Inputs {
  _call: MintAdminCall;

  constructor(call: MintAdminCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintAdminCall__Outputs {
  _call: MintAdminCall;

  constructor(call: MintAdminCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBurnAddressCall extends ethereum.Call {
  get inputs(): SetBurnAddressCall__Inputs {
    return new SetBurnAddressCall__Inputs(this);
  }

  get outputs(): SetBurnAddressCall__Outputs {
    return new SetBurnAddressCall__Outputs(this);
  }
}

export class SetBurnAddressCall__Inputs {
  _call: SetBurnAddressCall;

  constructor(call: SetBurnAddressCall) {
    this._call = call;
  }

  get _burnAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBurnAddressCall__Outputs {
  _call: SetBurnAddressCall;

  constructor(call: SetBurnAddressCall) {
    this._call = call;
  }
}

export class SetPropsCall extends ethereum.Call {
  get inputs(): SetPropsCall__Inputs {
    return new SetPropsCall__Inputs(this);
  }

  get outputs(): SetPropsCall__Outputs {
    return new SetPropsCall__Outputs(this);
  }
}

export class SetPropsCall__Inputs {
  _call: SetPropsCall;

  constructor(call: SetPropsCall) {
    this._call = call;
  }

  get _burnableLimit(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _maxTokenId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetPropsCall__Outputs {
  _call: SetPropsCall;

  constructor(call: SetPropsCall) {
    this._call = call;
  }
}

export class TransferCoreOwnerCall extends ethereum.Call {
  get inputs(): TransferCoreOwnerCall__Inputs {
    return new TransferCoreOwnerCall__Inputs(this);
  }

  get outputs(): TransferCoreOwnerCall__Outputs {
    return new TransferCoreOwnerCall__Outputs(this);
  }
}

export class TransferCoreOwnerCall__Inputs {
  _call: TransferCoreOwnerCall;

  constructor(call: TransferCoreOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferCoreOwnerCall__Outputs {
  _call: TransferCoreOwnerCall;

  constructor(call: TransferCoreOwnerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
