// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DeathKissed extends ethereum.Event {
  get params(): DeathKissed__Params {
    return new DeathKissed__Params(this);
  }
}

export class DeathKissed__Params {
  _event: DeathKissed;

  constructor(event: DeathKissed) {
    this._event = event;
  }

  get tokenId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get deathId(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class LCPChange extends ethereum.Event {
  get params(): LCPChange__Params {
    return new LCPChange__Params(this);
  }
}

export class LCPChange__Params {
  _event: LCPChange;

  constructor(event: LCPChange) {
    this._event = event;
  }

  get landId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get tokenId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get change(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LandChange extends ethereum.Event {
  get params(): LandChange__Params {
    return new LandChange__Params(this);
  }
}

export class LandChange__Params {
  _event: LandChange;

  constructor(event: LandChange) {
    this._event = event;
  }

  get id(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get baseDefence(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class RaidAction extends ethereum.Event {
  get params(): RaidAction__Params {
    return new RaidAction__Params(this);
  }
}

export class RaidAction__Params {
  _event: RaidAction;

  constructor(event: RaidAction) {
    this._event = event;
  }

  get toTokenId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get fromTokenId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get actionType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class RaidStatusChange extends ethereum.Event {
  get params(): RaidStatusChange__Params {
    return new RaidStatusChange__Params(this);
  }
}

export class RaidStatusChange__Params {
  _event: RaidStatusChange;

  constructor(event: RaidStatusChange) {
    this._event = event;
  }

  get id(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get RaidStatus(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get landId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get tokenId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get stakeAction(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get meral(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class Swapped extends ethereum.Event {
  get params(): Swapped__Params {
    return new Swapped__Params(this);
  }
}

export class Swapped__Params {
  _event: Swapped;

  constructor(event: Swapped) {
    this._event = event;
  }

  get tokenId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get swapperId(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get tokenId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get rewards(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Wilds__getStakeEventResultValue0Struct extends ethereum.Tuple {
  get timestamp(): BigInt {
    return this[0].toBigInt();
  }

  get baseDefence(): i32 {
    return this[1].toI32();
  }
}

export class Wilds__landPlotsResultLootPoolStruct extends ethereum.Tuple {
  get cost(): i32 {
    return this[0].toI32();
  }

  get drop1(): i32 {
    return this[1].toI32();
  }

  get drop2(): i32 {
    return this[2].toI32();
  }

  get drop3(): i32 {
    return this[3].toI32();
  }
}

export class Wilds__landPlotsResultPetPoolStruct extends ethereum.Tuple {
  get cost(): i32 {
    return this[0].toI32();
  }

  get drop1(): i32 {
    return this[1].toI32();
  }

  get drop2(): i32 {
    return this[2].toI32();
  }

  get drop3(): i32 {
    return this[3].toI32();
  }
}

export class Wilds__landPlotsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: Wilds__landPlotsResultLootPoolStruct;
  value7: Wilds__landPlotsResultPetPoolStruct;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: Wilds__landPlotsResultLootPoolStruct,
    value7: Wilds__landPlotsResultPetPoolStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromTuple(this.value6));
    map.set("value7", ethereum.Value.fromTuple(this.value7));
    return map;
  }
}

export class Wilds__stakeEventsResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class Wilds__stakesResult {
  value0: Address;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;
  value7: i32;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32,
    value7: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    return map;
  }
}

export class Wilds extends ethereum.SmartContract {
  static bind(address: Address): Wilds {
    return new Wilds("Wilds", address);
  }

  actions(): Address {
    let result = super.call("actions", "actions():(address)", []);

    return result[0].toAddress();
  }

  try_actions(): ethereum.CallResult<Address> {
    let result = super.tryCall("actions", "actions():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  adminActions(): Address {
    let result = super.call("adminActions", "adminActions():(address)", []);

    return result[0].toAddress();
  }

  try_adminActions(): ethereum.CallResult<Address> {
    let result = super.tryCall("adminActions", "adminActions():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateChange(
    start: BigInt,
    end: BigInt,
    def: i32,
    baseDefence: i32
  ): BigInt {
    let result = super.call(
      "calculateChange",
      "calculateChange(uint256,uint256,uint16,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(def)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseDefence))
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateChange(
    start: BigInt,
    end: BigInt,
    def: i32,
    baseDefence: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateChange",
      "calculateChange(uint256,uint256,uint16,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(def)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseDefence))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateDamage(_tokenId: i32): BigInt {
    let result = super.call(
      "calculateDamage",
      "calculateDamage(uint16):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tokenId))]
    );

    return result[0].toBigInt();
  }

  try_calculateDamage(_tokenId: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateDamage",
      "calculateDamage(uint16):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tokenId))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateDarkMagicDamage(atk: i32, def: i32): BigInt {
    let result = super.call(
      "calculateDarkMagicDamage",
      "calculateDarkMagicDamage(uint16,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(atk)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(def))
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateDarkMagicDamage(
    atk: i32,
    def: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateDarkMagicDamage",
      "calculateDarkMagicDamage(uint16,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(atk)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(def))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateDefendedDamage(atk: i32, def: i32): BigInt {
    let result = super.call(
      "calculateDefendedDamage",
      "calculateDefendedDamage(uint16,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(atk)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(def))
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateDefendedDamage(atk: i32, def: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateDefendedDamage",
      "calculateDefendedDamage(uint16,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(atk)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(def))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateLightMagicDamage(def: i32, spd: i32): BigInt {
    let result = super.call(
      "calculateLightMagicDamage",
      "calculateLightMagicDamage(uint16,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(def)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(spd))
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateLightMagicDamage(
    def: i32,
    spd: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateLightMagicDamage",
      "calculateLightMagicDamage(uint16,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(def)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(spd))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateSpdDamage(atk: i32, def: BigInt, spd: BigInt): BigInt {
    let result = super.call(
      "calculateSpdDamage",
      "calculateSpdDamage(uint16,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(atk)),
        ethereum.Value.fromUnsignedBigInt(def),
        ethereum.Value.fromUnsignedBigInt(spd)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateSpdDamage(
    atk: i32,
    def: BigInt,
    spd: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateSpdDamage",
      "calculateSpdDamage(uint16,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(atk)),
        ethereum.Value.fromUnsignedBigInt(def),
        ethereum.Value.fromUnsignedBigInt(spd)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateStamina(_tokenId: i32): i32 {
    let result = super.call(
      "calculateStamina",
      "calculateStamina(uint16):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tokenId))]
    );

    return result[0].toI32();
  }

  try_calculateStamina(_tokenId: i32): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "calculateStamina",
      "calculateStamina(uint16):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tokenId))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getLCP(_landId: i32, _tokenId: i32): BigInt {
    let result = super.call("getLCP", "getLCP(uint16,uint16):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_landId)),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tokenId))
    ]);

    return result[0].toBigInt();
  }

  try_getLCP(_landId: i32, _tokenId: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLCP", "getLCP(uint16,uint16):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_landId)),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_tokenId))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSlots(_landId: i32, _action: i32): Array<i32> {
    let result = super.call("getSlots", "getSlots(uint16,uint8):(uint16[])", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_landId)),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_action))
    ]);

    return result[0].toI32Array();
  }

  try_getSlots(_landId: i32, _action: i32): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      "getSlots",
      "getSlots(uint16,uint8):(uint16[])",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_landId)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_action))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getStakeEvent(
    _landId: i32,
    _index: BigInt
  ): Wilds__getStakeEventResultValue0Struct {
    let result = super.call(
      "getStakeEvent",
      "getStakeEvent(uint16,uint256):((uint256,uint16))",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_landId)),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return changetype<Wilds__getStakeEventResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getStakeEvent(
    _landId: i32,
    _index: BigInt
  ): ethereum.CallResult<Wilds__getStakeEventResultValue0Struct> {
    let result = super.tryCall(
      "getStakeEvent",
      "getStakeEvent(uint16,uint256):((uint256,uint16))",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_landId)),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Wilds__getStakeEventResultValue0Struct>(value[0].toTuple())
    );
  }

  landPlots(param0: i32): Wilds__landPlotsResult {
    let result = super.call(
      "landPlots",
      "landPlots(uint16):(uint256,uint256,uint256,uint16,uint16,uint8,(uint8,uint8,uint8,uint8),(uint8,uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return new Wilds__landPlotsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      changetype<Wilds__landPlotsResultLootPoolStruct>(result[6].toTuple()),
      changetype<Wilds__landPlotsResultPetPoolStruct>(result[7].toTuple())
    );
  }

  try_landPlots(param0: i32): ethereum.CallResult<Wilds__landPlotsResult> {
    let result = super.tryCall(
      "landPlots",
      "landPlots(uint16):(uint256,uint256,uint256,uint16,uint16,uint8,(uint8,uint8,uint8,uint8),(uint8,uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Wilds__landPlotsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        changetype<Wilds__landPlotsResultLootPoolStruct>(value[6].toTuple()),
        changetype<Wilds__landPlotsResultPetPoolStruct>(value[7].toTuple())
      )
    );
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  safeScale(
    num: BigInt,
    inMax: BigInt,
    outMin: BigInt,
    outMax: BigInt
  ): BigInt {
    let result = super.call(
      "safeScale",
      "safeScale(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(num),
        ethereum.Value.fromUnsignedBigInt(inMax),
        ethereum.Value.fromUnsignedBigInt(outMin),
        ethereum.Value.fromUnsignedBigInt(outMax)
      ]
    );

    return result[0].toBigInt();
  }

  try_safeScale(
    num: BigInt,
    inMax: BigInt,
    outMin: BigInt,
    outMax: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeScale",
      "safeScale(uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(num),
        ethereum.Value.fromUnsignedBigInt(inMax),
        ethereum.Value.fromUnsignedBigInt(outMin),
        ethereum.Value.fromUnsignedBigInt(outMax)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeEvents(param0: i32, param1: BigInt): Wilds__stakeEventsResult {
    let result = super.call(
      "stakeEvents",
      "stakeEvents(uint16,uint256):(uint256,uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Wilds__stakeEventsResult(
      result[0].toBigInt(),
      result[1].toI32()
    );
  }

  try_stakeEvents(
    param0: i32,
    param1: BigInt
  ): ethereum.CallResult<Wilds__stakeEventsResult> {
    let result = super.tryCall(
      "stakeEvents",
      "stakeEvents(uint16,uint256):(uint256,uint16)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Wilds__stakeEventsResult(value[0].toBigInt(), value[1].toI32())
    );
  }

  stakes(param0: i32): Wilds__stakesResult {
    let result = super.call(
      "stakes",
      "stakes(uint16):(address,uint256,uint16,uint16,uint16,uint16,uint16,uint8)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return new Wilds__stakesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toI32()
    );
  }

  try_stakes(param0: i32): ethereum.CallResult<Wilds__stakesResult> {
    let result = super.tryCall(
      "stakes",
      "stakes(uint16):(address,uint256,uint16,uint16,uint16,uint16,uint16,uint8)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Wilds__stakesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toI32()
      )
    );
  }

  staking(): Address {
    let result = super.call("staking", "staking():(address)", []);

    return result[0].toAddress();
  }

  try_staking(): ethereum.CallResult<Address> {
    let result = super.tryCall("staking", "staking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  staminaCosts(param0: BigInt): i32 {
    let result = super.call("staminaCosts", "staminaCosts(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toI32();
  }

  try_staminaCosts(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "staminaCosts",
      "staminaCosts(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get meralAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _adminActions(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _staking(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _actions(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLandCall extends ethereum.Call {
  get inputs(): AddLandCall__Inputs {
    return new AddLandCall__Inputs(this);
  }

  get outputs(): AddLandCall__Outputs {
    return new AddLandCall__Outputs(this);
  }
}

export class AddLandCall__Inputs {
  _call: AddLandCall;

  constructor(call: AddLandCall) {
    this._call = call;
  }

  get id(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get lootCost(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get petCost(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get lootDrops(): Array<i32> {
    return this._call.inputValues[3].value.toI32Array();
  }

  get petDrops(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get _remainingELFx(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _emissionRate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _baseDefence(): i32 {
    return this._call.inputValues[7].value.toI32();
  }
}

export class AddLandCall__Outputs {
  _call: AddLandCall;

  constructor(call: AddLandCall) {
    this._call = call;
  }
}

export class DeathKissCall extends ethereum.Call {
  get inputs(): DeathKissCall__Inputs {
    return new DeathKissCall__Inputs(this);
  }

  get outputs(): DeathKissCall__Outputs {
    return new DeathKissCall__Outputs(this);
  }
}

export class DeathKissCall__Inputs {
  _call: DeathKissCall;

  constructor(call: DeathKissCall) {
    this._call = call;
  }

  get _tokenId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _deathId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class DeathKissCall__Outputs {
  _call: DeathKissCall;

  constructor(call: DeathKissCall) {
    this._call = call;
  }
}

export class EditLandCall extends ethereum.Call {
  get inputs(): EditLandCall__Inputs {
    return new EditLandCall__Inputs(this);
  }

  get outputs(): EditLandCall__Outputs {
    return new EditLandCall__Outputs(this);
  }
}

export class EditLandCall__Inputs {
  _call: EditLandCall;

  constructor(call: EditLandCall) {
    this._call = call;
  }

  get _landId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _remainingELFx(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _emissionRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _initBaseDefence(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _raidStatus(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class EditLandCall__Outputs {
  _call: EditLandCall;

  constructor(call: EditLandCall) {
    this._call = call;
  }
}

export class EmergencyUnstakeCall extends ethereum.Call {
  get inputs(): EmergencyUnstakeCall__Inputs {
    return new EmergencyUnstakeCall__Inputs(this);
  }

  get outputs(): EmergencyUnstakeCall__Outputs {
    return new EmergencyUnstakeCall__Outputs(this);
  }
}

export class EmergencyUnstakeCall__Inputs {
  _call: EmergencyUnstakeCall;

  constructor(call: EmergencyUnstakeCall) {
    this._call = call;
  }

  get _landId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class EmergencyUnstakeCall__Outputs {
  _call: EmergencyUnstakeCall;

  constructor(call: EmergencyUnstakeCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RaidActionCall extends ethereum.Call {
  get inputs(): RaidActionCall__Inputs {
    return new RaidActionCall__Inputs(this);
  }

  get outputs(): RaidActionCall__Outputs {
    return new RaidActionCall__Outputs(this);
  }
}

export class RaidActionCall__Inputs {
  _call: RaidActionCall;

  constructor(call: RaidActionCall) {
    this._call = call;
  }

  get toTokenId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get fromTokenId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get actionType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class RaidActionCall__Outputs {
  _call: RaidActionCall;

  constructor(call: RaidActionCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _staking(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _actions(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetAdminCall extends ethereum.Call {
  get inputs(): SetAdminCall__Inputs {
    return new SetAdminCall__Inputs(this);
  }

  get outputs(): SetAdminCall__Outputs {
    return new SetAdminCall__Outputs(this);
  }
}

export class SetAdminCall__Inputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAdminCall__Outputs {
  _call: SetAdminCall;

  constructor(call: SetAdminCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetStaminasCall extends ethereum.Call {
  get inputs(): SetStaminasCall__Inputs {
    return new SetStaminasCall__Inputs(this);
  }

  get outputs(): SetStaminasCall__Outputs {
    return new SetStaminasCall__Outputs(this);
  }
}

export class SetStaminasCall__Inputs {
  _call: SetStaminasCall;

  constructor(call: SetStaminasCall) {
    this._call = call;
  }

  get _staminaCosts(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }
}

export class SetStaminasCall__Outputs {
  _call: SetStaminasCall;

  constructor(call: SetStaminasCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _landId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _tokenId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _action(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class SwapDefendersCall extends ethereum.Call {
  get inputs(): SwapDefendersCall__Inputs {
    return new SwapDefendersCall__Inputs(this);
  }

  get outputs(): SwapDefendersCall__Outputs {
    return new SwapDefendersCall__Outputs(this);
  }
}

export class SwapDefendersCall__Inputs {
  _call: SwapDefendersCall;

  constructor(call: SwapDefendersCall) {
    this._call = call;
  }

  get _tokenId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _swapperId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SwapDefendersCall__Outputs {
  _call: SwapDefendersCall;

  constructor(call: SwapDefendersCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get _tokenId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}
